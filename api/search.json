[{"id":"ff907d249ea44a6b023d5dc55ca13fd6","title":"ABAP: Controle de Fluxo de Programa","content":"CondicionaisIF &#x2F; ELSEIF &#x2F; ELSECASE &#x2F; WHENRepetiçãoDOWHILELOOPTratamento de ExceçõesTRY &#x2F; RETRY &#x2F; CATCH","slug":"abap-06-control-flow","date":"2022-11-07T22:23:59.037Z","categories_index":"ABAP","tags_index":"Guia ABAP,Introdução ao ABAP","author_index":"Edmilson A."},{"id":"05cf5d58e413f45d8e06fbae73d8c44e","title":"ABAP: Operadores","content":"No ABAP os operadores podem ser de atribuição, aritméticos, relacionais, booleanos, de string e de bit. Este conteúdo descreve os principais operadores e expressões existentes. \n\n\n\n\n\n\n\n\n\nNa matemática e na programação, operador  é um simbolo (caractere) que representa uma ação, cálculo ou lógica específica\n\n\n\n\n\n\n\n\n\nUma expressão  é uma unidade válida de código, geralmente composta por operadores, que retorna um resultado\nOperadores de Atribuição\n\n\nNome Operador\nOperador\nPalavra-chave\n\n\n\nAtribuição\n&#x3D;\nMOVE\n\n\nCasting\n?&#x3D;\nCAST\n\n\nAtribuiçãoPara atribuir valores a variaveis podemos utilizar o operador igual = ou palavra-chave MOVE.\nDATA v_played_games TYPE i.\nMOVE 30 TO v_played_games.    \" Atribuição via MOVE TO\nv_played_games = 30.          \" Atribuição via operador\n\n\n\n\n\n\n\n\n\nQuando uma variavel for de tipo diferente do valor da atribuição, pode ocorrer uma conversão automática antes da atribuição. Conversões podem disparar exceções por incompatibilidade de valores ou por estouro de memória da variavel (overflow).\nVeja mais em: Visão geral sobre atribuição e exceções 🔗\nCastingO operador de casting 🔗 ?= serve para atribuição entre duas variáveis de referência. Se a atribuição for bem-sucedida, a variavel atribuida irá apontar para a mesma referencia fornecida.\nVeja mais em: Regras para atribuição de referência 🔗\nOperadores Aritméticos\n\n\nNome Operador\nOperador\nPalavra-chave\n\n\n\nAdição\n+\nADD\n\n\nSubtração\n-\nSUBTRACT\n\n\nMultiplicação\n*\nMULTIPLY\n\n\nDivisão\n&#x2F;\nDIVIDE\n\n\nDivisão Inteira\n\nDIV\n\n\nMódulo\n\nMOD\n\n\nPotência\n**\n\n\n\nDATA v_number TYPE i VALUE 5.\nv_number + 25.   \" Adição\nv_number - 20.   \" Subtração\nv_number * 5.    \" Multiplicação\nv_number / 10.   \" Divisão\nv_number DIV 3.  \" Divisão Inteira\nv_number MOD 3.  \" Módulo\nv_number **  3.  \" Potência\nOperações básicas via palavras-chave:\nADD      25 TO   v_number.  \" Adição\nSUBTRACT 10 FROM v_number.  \" Subtração\nMULTIPLY v_number BY 5.     \" Multiplicação\nDIVIDE   v_number BY 10.    \" Divisão\n\nOperadores de String\n\n\nNome Operador\nOperador\nPalavra-chave\n\n\n\nConcatenação\n&amp; ou &amp;&amp;\nCONCATENATE\n\n\nString Template\n||\n\n\n\nDATA v_text TYPE string.\nConcatenação mantendo espaçamento:\nv_text = 'Hello' &amp; ' ' &amp; 'World!'.\nConcatenação suprimindo espaçamentos:\nv_text = 'Hello' &amp;&amp; ' ' &amp;&amp; 'World!'.\nConcatenação via palavra-chave:\nCONCATENATE 'Hello' 'World' INTO v_text.\nCONCATENATE 'Hello' 'World' SEPARATED BY ' ' INTO v_text.\n\n\nOperadores RelacionaisPadrãoIgualMaiorMenorMaior IgualMenor IgualEntreInicialExclusivo para CaracteresContém ApenasContém QualquerContém StringContém PadrãoOperadores BooleanosNegaçãoConjunçãoDisjunção","slug":"abap-05-operators","date":"2022-11-07T21:02:25.245Z","categories_index":"ABAP","tags_index":"Guia ABAP,Introdução ao ABAP","author_index":"Edmilson A."},{"id":"7dfad76e64f44c07b3d1c07e4d7f0901","title":"ABAP: Sintaxe","content":"O ABAP possui uma sintaxe bastante baseada em palavras-chave como outras linguagens de sua geração (FORTRAN, COBOL, SQL, C++, …), mas também possui uma sintaxe baseada em expressões, operadores e funções pré definidas como em linguagens mais modernas devido à sua evolução. Ambos os estilos são interoperaveis uma vez que a linguagem principal não quebra a retro compatibilidade.\nSintaxe Básica&lt;PALAVRA-CHAVE&gt; &lt;ADITIVOS&gt; &lt;FIM INSTRUÇÃO&gt;\nCONSTANTS hello TYPE char5 VALUE 'Olá'.\nCONSTANTS world TYPE char5 VALUE 'Mundo!'.\n\nWRITE hello &amp;&amp; world.\n\nPrincipais Caracteristicas de uma Instrução ABAP:\n\nNão possuem distinção entre espaçamentos extras, quebra de linha ou identação.\nDeclarações não possuem distinção entre maiusculas&#x2F;minusculas Case Insesitive\nNormalmente começam com uma palavra chave ABAP Keyword\nDevem possuir pelo menos um espaço entre palavras.\nDevem ser encerradas com um ponto . End Statement\n\nInstruções Encadeadas&lt;PALAVRA-CHAVE&gt; &lt;OPERADOR&gt;        &lt;INSTRUÇÃO 1&gt; &lt;SEPARADOR&gt;        &lt;INSTRUÇÃO N&gt; &lt;SEPARADOR&gt;\nCONSTANTS: \n    hello TYPE char5 VALUE 'Olá',\n    world TYPE char5 VALUE 'Mundo!'.\n\nWRITE hello &amp;&amp; world.\n\nInstruções consecutivas podem ser combinadas através do operador de encadeamento após a palavra chave inicial : Chain Operator e separadas entre cada repetição por virgula , Comma Separator\nChamamos essa combinação de instruções encadeadas Chained Statements\nREPLACE 'A' WITH 'B' INTO firstname.\nREPLACE 'A' WITH 'B' INTO lastname.\nREPLACE 'A' WITH 'B' INTO: firstname, lastname.\n\nComentários* &quot;\n* ------------------------------------------------ *\n*  Programa: RESERVAS\n*  Autor: ABAP Developer\n* ------------------------------------------------ *\nREPORT BOOKINGS.\n\n* Recupera os dados das reservas de hospedagem do banco de dados\nSELECT * FROM booking_info\n  WHERE accommodation_type = 'S'          \" Reservas em Suites\n    AND check_in_date     >= sy_datum.    \" A partir da data atual\n(...) \n\nComentarios podem ser declarados de duas formas: \n\nAsterisco * como primeiro caractere de uma linha\nAspas duplas &quot; em qualquer parte do código\n\nQualquer declaração após estes caracteres, na mesma linha, serão consideradas comentários e não serão interpretadas pelo compilador\nExemplo de Representação SintáticaPara facilizar a visualização dos conceitos relacionados à sintaxe, previamente apresentados, segue o código de um programa em ABAP junto a sua representação sintática.\n\n\n\n\n\n\n\n\n\nNeste exemplo, para suprimir espaço e facilitar a visualização, iremos: \n\nChamar todos os identificadores de Name \nChamar todos os valores literais de Value\nChamar todas os principais operadores de Operator\nChamar todas as palavras-chave de Keywords\n\n\n\n\n\n\n\n\n\n\n\nIdentificadores são nomes atribuidos aos dados declarados (ex: variaveis, funções, …)\nValores Literais são valores estáticos que expressam a sí, de forma literal, no código\nPalavras-chaves representam recusos da linguagem em forma de comandos\nOperadores são um tipo de aditivo para manipulação de dados\n\n\n\n\nCódigo ABAP\nRepresentação Sintática\n\n\n\n\n\n\n* ------------------------------------ *\n*  Report Z_REPORT_ALV_01\n* ------------------------------------ *\nREPORT z_report_alv_01.\n\n* ------------------------------------ *\n*  Declaração dos dados\n* ------------------------------------ *\nTABLES: spfli.\n\nTYPES: \n  BEGIN OF ty_spfli,\n    airpfrom  TYPE spfli-airpfrom,\n    countryfr TYPE spfli-countryfr,\n    cityfrom  TYPE spfli-cityfrom,\n    airpto    TYPE spfli-airpto,\n    countryto TYPE spfli-countryto,\n    cityto    TYPE spfli-cityto,\n  END OF ty_spfli.\n\nDATA:\n  lt_spfli TYPE TABLE OF ty_spfli.\n\nDATA:\n  lo_alv TYPE REF TO cl_salv_table.\n\n* ------------------------------------ *\n*  Declaração dos parâmetros da tela\n* ------------------------------------ *\n\nSELECTION-SCREEN: BEGIN OF BLOCK block01 \n  WITH FRAME TITLE TEXT-t01.\n    SELECT-OPTIONS:\n      s_carrid FOR spfli-carrid,\n      s_connid FOR spfli-connid,\n      s_fltime FOR spfli-fltime,\n      s_dtime  FOR spfli-deptime,\n      s_atime  FOR spfli-arrtime,\n      s_dist   FOR spfli-distance.\n\nSELECTION-SCREEN END OF BLOCK block01.\n\n* ------------------------------------ *\n*  Seleção dos Dados\n* ------------------------------------ *\n\nSELECT\n  airpfrom\n  countryfr\n  cityfrom\n  airpto\n  countryto\n  cityto\nFROM spfli\n  INTO TABLE lt_spfli\n    WHERE carrid    IN s_carrid\n      AND connid    IN s_connid\n      AND fltime    IN s_fltime\n      AND deptime   IN s_dtime\n      AND arrtime   IN s_atime\n      AND distance  IN s_dist.\n\nIF sy-subrc NE 0.\n  MESSAGE TEXT-e01 TYPE 'E'.\n  LEAVE LIST-PROCESSING.\nENDIF.\n\n* ------------------------------------ *\n*  Exibição dos Dados\n* ------------------------------------ *\n\nTRY.\n    cl_salv_table=>factory( \n      IMPORTING \n        r_salv_table = lo_alv\n      CHANGING  \n        t_table      = lt_spfli ).\n\n    lo_alv->get_functions( )->set_all( ).\n\n    lo_alv->display( ).\n\n  CATCH cx_salv_msg.\n\nENDTRY.\n\n\n\n\n&lt;COMMENTS>\n&lt;COMMENTS>\n&lt;COMMENTS>\n&lt;KEYWORKD> &lt;NAME>.\n\n&lt;COMMENTS>\n&lt;COMMENTS>\n&lt;COMMENTS>\n&lt;KEYWORKD>: &lt;NAME>.\n\n&lt;KEYWORKD>: \n  &lt;KEYWORKD> &lt;NAME>,\n    &lt;NAME> &lt;KEYWORKD> &lt;NAME>,\n    &lt;NAME> &lt;KEYWORKD> &lt;NAME>,\n    &lt;NAME> &lt;KEYWORKD> &lt;NAME>,\n    &lt;NAME> &lt;KEYWORKD> &lt;NAME>,\n    &lt;NAME> &lt;KEYWORKD> &lt;NAME>,\n    &lt;NAME> &lt;KEYWORKD> &lt;NAME>,\n  &lt;KEYWORKD> &lt;NAME>.\n\n&lt;KEYWORKD>:\n  &lt;NAME> &lt;KEYWORKD> &lt;NAME>.\n\n&lt;KEYWORKD>:\n  &lt;NAME> &lt;KEYWORKD> &lt;NAME>.\n\n&lt;COMMENTS>\n&lt;COMMENTS>\n&lt;COMMENTS>\n\n&lt;KEYWORKD>: &lt;KEYWORKD> &lt;NAME>\n  &lt;KEYWORKD> &lt;NAME>.\n    &lt;KEYWORD>:\n      &lt;NAME> &lt;KEYWORD> &lt;NAME>,\n      &lt;NAME> &lt;KEYWORD> &lt;NAME>,\n      &lt;NAME> &lt;KEYWORD> &lt;NAME>,\n      &lt;NAME> &lt;KEYWORD> &lt;NAME>,\n      &lt;NAME> &lt;KEYWORD> &lt;NAME>,\n      &lt;NAME> &lt;KEYWORD> &lt;NAME>.\n\n&lt;KEYWORD> &lt;KEYWORD> &lt;NAME>.\n\n&lt;COMMENTS>\n&lt;COMMENTS>\n&lt;COMMENTS>\n\n&lt;KEYWORD>\n  &lt;NAME>\n  &lt;NAME>\n  &lt;NAME>\n  &lt;NAME>\n  &lt;NAME>\n  &lt;NAME>\n&lt;KEYWORD> &lt;NAME>\n  &lt;KEYWORD> &lt;NAME>\n    &lt;KEYWORD> &lt;NAME> &lt;OPERATOR> &lt;NAME>\n      &lt;KEYWORD> &lt;NAME> &lt;OPERATOR> &lt;NAME>\n      &lt;KEYWORD> &lt;NAME> &lt;OPERATOR> &lt;NAME>\n      &lt;KEYWORD> &lt;NAME> &lt;OPERATOR> &lt;NAME>\n      &lt;KEYWORD> &lt;NAME> &lt;OPERATOR> &lt;NAME>\n      &lt;KEYWORD> &lt;NAME> &lt;OPERATOR> &lt;NAME>.\n\n&lt;KEYWORD> &lt;NAME> &lt;OPERATOR> &lt;VALUE>.\n  &lt;KEYWORD> &lt;NAME> &lt;KEYWORD> &lt;VALUE>.\n  &lt;KEYWORD> &lt;KEYWORD>.\n&lt;KEYWORD>.\n\n&lt;COMMENTS>\n&lt;COMMENTS>\n&lt;COMMENTS>\n\n&lt;KEYWORD>.\n    &lt;NAME>=>&lt;NAME>( \n      &lt;KEYWORD> \n        &lt;NAME> &lt;OPERATOR> &lt;NAME>\n      &lt;KEYWORD>  \n        &lt;NAME> &lt;OPERATOR> &lt;NAME> ).\n\n    &lt;NAME>->&lt;NAME>( )->&lt;NAME>( ).\n\n    &lt;NAME->&lt;NAME>( ).\n\n  &lt;KEYWORD> &lt;NAME>.\n\n&lt;KEYWORD>.\n\n\n\n","slug":"abap-02-syntax","date":"2022-11-06T17:27:00.163Z","categories_index":"ABAP","tags_index":"Guia ABAP,Introdução ao ABAP","author_index":"Edmilson A."},{"id":"70f7a7177b4d809728709bdec7ca76a4","title":"ABAP: Declaração de Dados","content":"No ABAP existe uma infinidade distinta de dados que podem ser declarados, logo, este conteúdo aborda a declaração das principais categorias dados, sem focar nos tipos de dados pois estes serão abordados posteriormente.\nNo ABAP podemos fazer as seguintes declarações:\n\nTipos\nVariaveis\nConstantes\nLiterais\n\n\n\n\n\n\n\n\n\n\nComo os tipo de dados no ABAP serão abordados posteriormente, vamos assumir em todos os exemplos os seguintes nomes fícticios como tipos de dados, para facilitar o entendimento:\n\n\n\nNome Fícticio\nTipo\nDescrição\n\n\n\nnumero\nnumérico\naceita apenas numeros\n\n\ntexto\ntexto\naceita qualquer caractere\n\n\nIdentificadoresEm programação, o ato de declarar dados implica em fornecer um nome simbólico para cada elemento declarado. Esses nomes são de chamados identificadores e sua declaração no ABAP obedecem às seguintes regras:\n\n\n\n\n\n\n\n\n\n\nDevem conter apenas letras A-Z, digitos0-9e underline  _\nDevem iniciar com letras ou underline, nunca com digitos\nDevem conter no máximo 30 caracteres\n\nViolar qualquer uma dessas regras, impede a compilação do programa ABAP disparando um erro correspondente durante a tentativa de ativação do código.\nTiposNo ABAP é possível criar tipos de dados customizados, dentro dos programas, usando a palavra-chave TYPES. Embora já existam diversos tipos de dados predefinidos, estes tipos predefinidos podem ser usados para descrever e compor outros tipos mais convenientes, como nos exemplos a seguir:\nTipo SimplesRepresentação de números de inscrição como CPF e CNPJ, pela declaração de tipos simples:\nTYPES tipo_cpf  TYPE numero LENGTH 11.\nTYPES tipo_cnpj TYPE numero LENGTH 14.\nNa declaração acima: \n\nA palavra-chave TYPES inicia a declaração do identificador\nA palavra-chave TYPE define qual será o tipo de dados\nA palavra-chave LENGTH define o comprimento máximo.\n\nDesse modo os tipos tipo_cpf e tipo_cnpj existem no programa e podem ser usados para declaração de variaveis e outros dados posteriormente. Os dados declarados com estes tipos vão obedecer as regras estabelecidas durante a criação do tipo customizado.\nA partir deste ponto, tipos simples serão nomeados com o prefixo ty_ como abreviação de types: ty_cpf ty_cnpj.\nTipo Composto: EstruturaRepresentação de informações básicas de uma pessoa, pela declaração de tipos compostos:\nTYPES ty_cpf TYPE numero LENGTH 11.\n\nTYPES: \n  BEGIN OF ty_estrutura_pessoa,\n    nome      TYPE texto,   \" campos\n    idade     TYPE numero,  \" campos\n    cpf       TYPE ty_cpf,  \" reutilização do tipo ty_cpf\n  END OF ty_estrutura_pessoa. \nNa declaração acima: \n\nA palavra-chave TYPES com : inicia a declaração de tipos\nA palavra-chave BEGIN OF inicia a declaração do identificador do tipo composto\nAs palavras-chave BEGIN OF e END OF marcam o inicio e o fim do tipo composto\nNo meio, declara-se os identificadores para cada campo necessário\nA palavra-chave TYPE define o tipo de dados para cada campo declarado\n\nEste tipo é chamado de Estrutura e é composto primariamente por campos. Uma variavel declarada com ty_estrutura_pessoa, poderia representar internamente dados dos seus campos no seguinte formato:\n\n\n\nNome\nIdade\nCPF\n\n\n\nTony Stark\n41\n00011100022\n\n\nA partir deste ponto, tipos estrutura serão nomeados com o prefixo ty_s_ como abreviação de types structure: ty_s_pessoa.\nTipo Composto: TabelaÉ possível reutilizar um tipo simples ou uma estrutura para criar outro tipo composto chamado Tabela. \nDeclaração de tipo tabela com base em um tipo simples:\nTYPES ty_cpf        TYPE numero LENGTH 11.\nTYPES ty_tabela_cpf TYPE TABLE OF ty_cpf.\nNa declaração acima: \n\nA palavra-chave TYPES inicia a declaração do identificador\nA palavra-chave TYPE TABLE OF define qual o tipo da tabela\n\nNeste exemplo, ty_cpf define apenas um campo (tipo simples), logo a tabela irá possuir apenas uma coluna (cpf). Uma variavel declarada com ty_tabela_cpf, poderia representar seus dados no seguinte formato:\n\n\n\n#\nCPF\n\n\n\n1\n00033366691\n\n\n2\n00033366692\n\n\n…\n…\n\n\nN\n0003336669N\n\n\nTabelas possuem linhas e colunas. As linhas são representadas pelos elementos adicionados à tabela, e as colunas são representadas pelos campos que compoem a tabela.\nA partir deste ponto, tipos tabela serão nomeados com o prefixo ty_tt_ como abreviação de types table type: ty_tt_cpf.\nDeclaração de tipo tabela com base em um tipo composto:\nTYPES ty_cpf TYPE numero LENGTH 11.\n\nTYPES: \n  BEGIN OF ty_s_pessoa,\n    nome      TYPE texto, \n    idade     TYPE numero,\n    cpf       TYPE ty_cpf,\n  END OF ty_s_pessoa. \n\nTYPES ty_tt_pessoa TYPE TABLE OF ty_s_pessoa.\nNa declaração acima: \n\nA palavra-chave TYPES inicia a declaração do identificador\nA palavra-chave TYPE TABLE OF define qual o tipo da tabela\n\nNeste exemplo, ty_s_pessoa define três campos, logo a tabela irá possuir três colunas (nome, idade, cpf). Uma variavel declarada com ty_s_pessoa, poderia representar seus dados no seguinte formato:\n\n\n\n#\nNome\nIdade\nCPF\n\n\n\n1\nTony Stark\n48\n00011100021\n\n\n2\nSteve Rogers\n100\n00011100022\n\n\n3\nThor Odisson\n1554\n00011100023\n\n\n4\nBruce Banner\n49\n00011100024\n\n\n5\nNatasha Romanoff\n34\n00011100025\n\n\n6\nClint Barton\n47\n00011100026\n\n\nN\n…\n…\n…\n\n\nVariaveisAs variáveis servem para armazenar&#x2F;referenciar valores durante a execução de programas, através de um identificador. Seus valores podem variar sempre que necessário, de acordo com o seu tipo de dados. Elas também possuem as seguintes caracteristicas:\n\n\n\n\n\n\n\n\n\n\nDevem especificar um tipo na declaração Tipagem Estática\nApós declaradas, não podem mudar seu tipo em execução Tipagem Forte\nSão declaradas com a palavra-chave DATA\n\nA palavra-chave DATA permite declarar a maior parte dos dados, desde variaveis simples a estruturas, tabelas e objetos. \nAs palavras-chave TYPE e LIKE permitem definir o tipo da variavel.\nTYPEA palavra-chave TYPE define o tipo de dados de uma variavel com base em tipos:\nDATA:\n  v_numero TYPE numero,             \n  v_texto  TYPE texto,             \n  v_cpf    TYPE ty_cpf,             \n  s_pessoa TYPE ty_s_pessoa,\n  t_pessoa TYPE ty_tt_pessoa,   \nEstruturas podem ser obtidas através de um tipo tabela via LINE OF:\nDATA e_pessoa TYPE LINE OF ty_tabela_pessoa,\n\nTabelas podem ser obtidas através de tipos simples ou estruturas via TABLE OF:\nDATA:\n  t_cpf    TYPE TABLE OF ty_cpf,\n  t_pessoa TYPE TABLE OF ty_s_pessoa.\n\nLIKEA palavra-chave TYPE define o tipo de dados com base no tipo de uma variavel existente:\nDATA:\n  v_cpf_01    TYPE ty_cpf,  \n  v_cpf_02    LIKE v_cpf_01,             \" ty_cpf\n\n  s_pessoa_01 TYPE ty_s_pessoa,  \n  s_pessoa_02 LIKE s_pessoa_01,          \" ty_s_pessoa\n\n  t_pessoa_01 TYPE ty_tt_pessoa,  \n  t_pessoa_02 LIKE t_pessoa_01,          \" ty_tt_pessoa\n         \n  s_pessoa_03 LIKE LINE OF  t_pessoa_01, \" apenas os campos de ty_tt_pessoa\n  t_pessoa_03 LIKE TABLE OF s_pessoa_01. \" colunas via campos de ty_s_pessoa\nTipos EspeciaisPonteiros são tipos referenciados declarados via FIELD-SYMBOLS:\nFIELD-SYMBOLS &lt;ponteiro> TYPE any.\n\nTabelas possuem tipos especiais, que serão abordados posteriormente:\nDATA:\n  tabela_ordenada TYPE SORTED TABLE OF database_table,\n  tabela_hashed   TYPE HASHED TABLE OF database_table,\n  tabela_range    TYPE RANGE OF data_element.\n\nObjetos obrigatóriamente devem utilizar REF TO para referenciar classes:\nDATA o_alv TYPE REF TO cl_salv_table.\n\n\nConstantesEm constantes também servem para armazenar&#x2F;referenciar valores durante a execução de programas como as variaveis, porém não podem ter o valor alterado após atribuição, assim como seu nome sugere.\nCONSTANTS carga_horaria_base TYPE numero VALUE 8.\nNa declaração acima, CONSTANTS inicia a declaração do identificador, TYPE define qual será o tipo de dados e VALUE define o valor.\nCONSTANTS c_carga_horaria_base TYPE numero VALUE 8.\n\nc_carga_horaria_base = 16.    \nCaso haja uma tentativa de reatribuição do valor de uma constante, o ABAP não permitirá a compilação deste código disparando um erro durante a ativação, ex: \n\nc_carga_horaria_base cannot be modified.\n\nConstantes comumente são usadas como valores somente leitura, para dar significado a valores que podem repetir diversas vezes em um código.\nIF v_carga_horaria_cumprida > c_carga_horaria_base.\n  v_horas_extra = v_carga_horaria_cumprida - c_carga_horaria_base.\nENDIF. \n\nLiteraisLiterais representam valores no código ABAP, são valores literalmente expressos no código pelo desenvolvedor quando necessário. Eles não representam variaveis, nem constantes e por não estarem referenciados são estáticos (valores fixos). Os valores literais podem ser do tipo:\n\nNuméricos\n\n10880            \" Valor numérico inteiro\n1.61803399       \" Valor numérico decimal\n'2.5e+5'         \" Valor numérico em notação cientifica\n\nCaracteres\n\n'Malibu Point'   \" Caracteres via (') aspas simples \n`Golden Ratio`   \" Caracteres via (`) crase ","slug":"abap-03-declaration","date":"2022-11-06T17:26:58.602Z","categories_index":"ABAP","tags_index":"Guia ABAP,Introdução ao ABAP","author_index":"Edmilson A."},{"id":"46768f5dde918bb1b3c6a0857f888585","title":"ABAP: Tipos de Dados","content":"Todas as linguagens de programação têm tipos de dados e estruturas de dados embutidas, mas geralmente há diferenças nesses dados entres as linguagems. Este conteúdo classifica e lista os principais tipos de dados presente no ABAP.\n\n\n\n\n\n\n\n\n\nOs tipo de dados no ABAP possuem diversas classificações distintas entre versões da documentação, em materiais de cursos, academias e afins. Neste conteúdo os tipos de dados serão classificados como locais ou globais, devido ao efeito prático dessas terminologias no dia a dia de desenvolvimento.\nTipos de Dados LocaisOs tipos de dados locais representam tipos de dados primitivos predefinidos disponiveis para utilização em qualquer programa ABAP. Esses tipos possuem apenas atributos técnicos, em contraste com os tipos globais.\nOs tipos primitivos podem ser agrupados em:\n\nNuméricos\nCaracteres\nData&#x2F;Hora\nBytes\n\nNuméricos 🔗\n\n\nTipo\nDescrição\nComprimento\n\n\n\nI\nNúmero inteiro de 4 bytes\n4 bytes\n\n\nINT8\nNúmero inteiro de 8 bytes\n8 bytes\n\n\nDECFLOAT16\nNúmero com 16 casas decimais\n8 bytes com 16 decimais\n\n\nDECFLOAT34\nNúmero com 34 casas decimais\n16 bytes com 34 decimais\n\n\nDATA: \n    v_int        TYPE i          VALUE 2147483647,       \n    v_int8       TYPE int8       VALUE 9223372036854775807,\n    v_decfloat16 TYPE decfloat16 VALUE 4611686018427387904,\n    v_decfloat34 TYPE decfloat34 VALUE '2.8948022309329048855892746252172e+76'.\n\n\n\n\n\n\n\n\n\n\n\nA palavra-chave VALUE é opcional e serve para atribuir valor a uma variavel durante a sua declaração, posteriormente serão exibidas outras formas de atribuição.\n\nOutros tipos numéricos: B (1-Byte), S (2-Byte), F (Float 8-Byte), P (Packed 1-16 Bytes)\nCaracteres 🔗\n\n\nTipo\nDescrição\nComprimento\nDetalhes\n\n\n\nC\nCaracteres\nde 1 (padrão) até 262143\nComprimento deve ser especificado préviamente (Fixo)\n\n\nN\nCaracteres numéricos\nde 1 (padrão) até 262143\nComprimento deve ser especificado préviamente (Fixo)\n\n\nSTRING\nCadeia de caracteres\nVáriavel (Max Size)\nComprimento dinâmico\n\n\nDATA: \n    v_char             TYPE c      VALUE 'ABC123' LENGTH 6,\n    v_char_numerico(6) TYPE n      VALUE '123456',\n    v_string           TYPE string VALUE 'Hello World!'.\n\n\n\n\n\n\n\n\n\n\nPara os tipos C e N comprimento padrão 1 é assumido automaticamente, caso não seja especificado\nNa declaração v_char_numerico(6), v_variavel(comprimento) é uma forma alternativa de especificar o comprimento, como através da palavra-chave LENGTH\n\nData&#x2F;Hora 🔗\n\n\nTipo\nDescrição\nComprimento\nFormato\n\n\n\nD\nCaracteres numéricos no formato de data\n8\nYYYYMMDD\n\n\nT\nCaracteres numéricos no formato de hora\n6\nHHMMSS\n\n\nDATA: \n    v_data TYPE d VALUE 20221022,  \" YYYYMMDD -> 22-10-2022\n    v_hora TYPE t VALUE 213200.    \" HHMMSS   -> 21:32:00\n\n\n\n\n\n\n\n\n\n\nO formato de data possui as restrições: Ano (0001-9999), Mês (01-12), Dia (1-31)\nO formato de hora possui as restrições: Hora (00-23), Min (00-59), Seg (00-59)\n\nByte  🔗\n\n\nTipo\nDescrição\nComprimento\nDetalhes\n\n\n\nX\nBytes &#x2F; Hexadecimais\nByte (1 até 524287) Hex (00 até FF)\nComprimento deve ser especificado préviamente (Fixo)\n\n\nXSTRING\nCadeia de bytes &#x2F; hexadecimais\nVáriavel (Max Size)\nComprimento dinâmico\n\n\nDATA: \n    v_xstring TYPE xstring VALUE '20C4DD6DD965AF',\n    v_hex(7)  TYPE x       VALUE '20C4DD6DD965AF'.\n\nBooleanos (?) 🔗No ABAP, não há suporte para tipos de dados booleanos. Valores booleanos só ocorrem como resultado de expressões lógicas ou como resultado de uma função booleana.\n\n\n\n\n\n\n\n\n\nComumente no código fonte do sistema, módulos funcionais e programas ABAP, a validação de booleanos é realizada através de um campo do tipo char com comprimento 1, onde vazio _ significa falso e X significa verdadeiro.Existe no sistema, no componente SAP_BASIS, sob a forma global, dois elemento de dados para booleano e duas constantes “booleanas” que representam estes valores.\n\nOs elementos de dados seriam: boolean e xfeld\nAs constantes seriam: abap_true &#x2F; abap_on e abap_false &#x2F; abap_off\n\nValores Lógicos no ABAP\nTipos de Dados GlobaisOs tipos de dados globais representam todos os tipos de dados presentes no dicionario de dados do ABAP, disponiveis para utilização em qualquer programa ABAP, incluso os tipos definidos pelo usuário User-Defined Types. \nEstes tipos possuem além de atributos técnicos, metadados, suporte à rótulos e internacionalização, rotinas de conversão, ajudas de busca, valores permitidos, restrição de valores, entre outros em contraste com os tipos de dados locais.\n\n\n\n\n\n\n\n\n\nEstes tipos podem ser utilizados através do Dicionário ABAP na SE11 durante a criacão de novos tipos globais, ou diretamente no código durante a declaração de dados.\nNuméricos 🔗\n\n\nTipo\nDescrição\nComprimento\n\n\n\nINT1\nNúmero inteiro de 1 byte\n1 byte\n\n\nINT2\nNúmero inteiro de 2 bytes\n2 bytes\n\n\nINT4\nNúmero inteiro de 4 bytes\n4 bytes\n\n\nINT8\nNúmero inteiro de 8 bytes\n8 bytes\n\n\nFLTP\nNúmero de ponto flutuante\n16\n\n\nDEC\nNúmero decimal BCD\n1 a 31\n\n\nDF16_DEC\nNúmero com 16 casas decimais BCD\n1 a 15\n\n\nDF34_DEC\nNúmero com 34 casas decimais BCD\n1 a 31\n\n\nDF16_RAW\nNúmero com 16 casas decimais Binário\n8 bytes com 16 decimais\n\n\nDF34_RAW\nNúmero com 34 casas decimais Binário\n16 bytes com 34 decimais\n\n\nCaracteres 🔗\n\n\nTipo\nDescrição\nComprimento\n\n\n\nCHAR\nCampo de texto\n1-30000, 1333 (max) em tabelas\n\n\nNUMC\nCampo de caracteres numéricos\n1-255\n\n\nLCHR\nCampo de texto longo\n256-32000\n\n\nSSTRING\nString de texto curta\n1-1333\n\n\nSTRING\nString de texto dinâmica (CLOB)\n256+\n\n\nData&#x2F;Hora 🔗\n\n\nTipo\nDescrição\nComprimento\n\n\n\nDATS\nData no formato YYYYMMDD\n8\n\n\nTIMS\nHora no formato HHMMSS\n6\n\n\nACCP\nPeríodo no formato YYYYMM\n6\n\n\nByte 🔗\n\n\nTipo\nDescrição\nComprimento\n\n\n\nRAW\nString de bytes\n1-32000, 255 (max) em tabelas\n\n\nLRAW\nString longa de bytes\n256-32000\n\n\nRAWSTRING\nString de bytes dinâmico (BLOB)\n256+\n\n\nMoeda&#x2F;Quantidade 🔗\n\n\nTipo\nDescrição\nComprimento\n\n\n\nCURR\nCampo de moeda no formato BCD\n1-31\n\n\nCUKY\nCódigo da moeda para campo CURR\n5\n\n\nQUAN\nCampo de quantidade no formato BCD\n1-31\n\n\nUNIT\nCódigo de unidade para campo QUAN\n2-3\n\n\nEspeciais 🔗\n\n\nTipo\nDescrição\nComprimento\n\n\n\nCLNT\nCampo técnico para client do banco de dados\n3\n\n\nLANG\nCampo técnico para código de idioma\n1\n\n\n","slug":"abap-04-data","date":"2022-11-06T17:26:56.925Z","categories_index":"ABAP","tags_index":"Guia ABAP,Introdução ao ABAP","author_index":"Edmilson A."},{"id":"129a08e03d29887e85b5514f858d5c9d","title":"ABAP TLDR","content":"ABAP TLDR (Too long; didn’t Read) é uma tentativa de conteúdo prático e objetivo sobre a linguagem de programação ABAP e que possa servir de referência durante os primeiros passos da jornada de um desenvolvedor SAP.\nO conteúdo é destinado a quem deseja uma rápida visão geral sobre a linguagem de programação ABAP.\n\n\nABAPABAP é uma linguagem de programação proprietária criada pela SAP SE. \n\n\n\n\n\n\n\n\n\nPrincipais Caracteristicas:\n\nLinguagem de alto nível, tipada &amp; orientada a objetos\nAcesso integrado a tabelas de qualquer banco de dados (OpenSQL)\nRetrocompatibilidade entre todas as suas versões.\n\n\n\nSintaxe&lt;ABAP KEYWORD&gt; &lt;IDENTIFIERS | OPERATORS| EXPRESSIONS &gt; &lt;END STATEMENT&gt;Basic Syntax\nCONSTANTS hello TYPE char5 VALUE 'Olá'.\nCONSTANTS world TYPE char5 VALUE 'Mundo!'.\nCONSTANTS space TYPE char1 VALUE ' '.\n\nWRITE hello + space + world.\nChained Statements\nREPLACE 'A' WITH 'B' INTO firstname.\nREPLACE 'A' WITH 'B' INTO lastname.\nREPLACE 'A' WITH 'B' INTO: firstname, lastname.\nComments (*) | (&quot;)\n* ------------------------------------------------ *\n*  Programa: RESERVAS\n*  Autor: ABAP Developer\n* ------------------------------------------------ *\nREPORT BOOKINGS.\n\n* Recupera os dados das reservas de hospedagem do banco de dados\nSELECT * FROM booking_info\n  WHERE accommodation_type = 'S'          \" Reservas em Suites\n    AND check_in_date     >= sy_datum.    \" A partir da data atual\n(...) \n\nTipos de Dados LocaisNumeric Types\nDATA: \n    v_int        TYPE i          VALUE 2147483647,       \n    v_int8       TYPE int8       VALUE 9223372036854775807,\n    v_decfloat16 TYPE decfloat16 VALUE 4611686018427387904,\n    v_decfloat34 TYPE decfloat34 VALUE 2.8948022309329048855892746252172e+76.\nOutros tipos numéricos: B (1-Byte), S (2-Byte), F (Float 8-Byte), P (Packed 1-16 Bytes)\nCharacter-Like Types\nDATA: \n    v_char           TYPE c       VALUE 'ABC123' LENGTH 6,\n    v_number_char(6) TYPE n       VALUE '123456',\n    v_string         TYPE string  VALUE 'Hello World!'.\nDateTime Types\nDATA: \n    v_data TYPE d VALUE 20221022,    \" YYYYMMDD -> User Format -> 22-10-2022\n    v_hora TYPE t VALUE 213200.      \" HHMMSS   -> User Format -> 21:32:00\nByte-Like Types\nDATA: \n    v_xstring TYPE xstring VALUE '20C4DD6DD965AF',\n    v_hex(2)  TYPE x       VALUE 'FF'.\n","slug":"abap-00-tldr","date":"2022-11-06T17:26:56.164Z","categories_index":"Guias","tags_index":"Guia ABAP,Overview,Cheatsheet,Micro Learning","author_index":"ABAP Academy"},{"id":"fcbfe73c704793f3e24202202a0cb504","title":"ABAP: Advanced Business Application Programming","content":"ABAP é uma linguagem de programação proprietária criada pela SAP SE. \n\n\n\n\n\n\n\n\n\nPrincipais Caracteristicas:\n\nLinguagem de alto nível, fortemente tipada e orientada a objetos\nAcesso integrado a tabelas de qualquer banco de dados (OpenSQL)\nRecursos de modelagem, definição, controle e acesso de banco de dados\nRecursos de internacionalização, design de relatórios &amp; UI\nRetrocompatibilidade entre todas as suas versões\n\nA linguagem de programação ABAP é projetada para desenvolver aplicativos de negócios robustos em vários idiomas, baseado no seu suporte a processamento de massivo de dados, conversões de tipos e elementos de texto traduzíveis.\nO ABAP é independente de plataforma, independentemente do sistema de banco de dados relacional, do sistema operacional e da versão da linguagem, preservando o significado e funcionamento dos programas escritos com a linguagem em qualquer uma dessas circunstâncias. \nFerramentas de desenvolvimento On-Premise\n\n\n\n\n\n\n\n\n\nAs Transações ou T-Codes representam os códigos de uma transação que inicializa programas no sistema SAP.\nStandard é um termo dentro do mundo sap que representa todo programa, código recursos e funcionalidades criada pela SAP e disponibilizadas através de seu sistema. \nProgramas Standard existem para operar e gerenciar sistemas SAP sob diversas perspectivas, desde equipes técnicas às equipes de negócio e gestão. \nLogo existe um grande conjunto de ferramentas de desenvolvimento no sistema em forma de transações, que serão listadas a seguir. \nEssas transações também serão mencionadas conforme necessidade durante o guia, uma vez que o foco do guia é a linguagem de programação e não o sistema, inicialmente.\nOs códigos presentes no guia podem ser reproduzidos utilizando a transação SE38.\n\n\n\n\nTransação\nNome\nDescrição\n\n\n\nSE09\nTransport Organizer\nGerenciamento de requests e tasks\n\n\nSE11\nABAP Dictionary\nDicionario de dados\n\n\nSE16\nData Browser\nConsulta ao banco de dados\n\n\nSE16N\nNew Data Browser\nConsulta ao danco de dados otimizada\n\n\nSE21\nPackage Builder\nGerenciamento de pacote de aplicações\n\n\nSE24\nClass Builder\nDesenvolvimento de Classes &amp; Interfaces\n\n\nSE37\nFunction Builder\nDesenvolvimento de Módulos de Funções\n\n\nSE38\nEditor ABAP\nDesenvolvimento de programas em geral\n\n\nSE80\nObject Navigator\nAmbiente de desenvolvimento integrado\n\n\nSE91\nMessage Maintenance\nGerenciamento de classes de mensagem\n\n\nSE93\nMaintain Transaction\nGerenciamento de transações\n\n\nST05\nPerformance Trace\nMonitor de performance do banco de dados\n\n\nST22\nRuntime Errors\nMonitor de erros de programas DUMPs\n\n\nABAPHELP\nABAP Keyword Documentation\nDocumentação de Keywords ABAP\n\n\nEvolução do ABAP  🔗\n\n\nVersões ABAP\nLançamento\n\n\n\nABAP 7.56\n2021\n\n\nABAP 7.55\n2020\n\n\nABAP 7.54\n2019\n\n\nABAP 7.53\n2018\n\n\nABAP 7.52\n2017\n\n\nABAP 7.51\n2016\n\n\nABAP 7.50\n2015\n\n\nABAP 7.40\n2013\n\n\nABAP 7.31\n2011\n\n\nABAP 7.30\n2010\n\n\nABAP 7.20\n2009\n\n\nABAP 7.11\n2008\n\n\nABAP 7.10\n2007\n\n\nABAP 7.00\n2005\n\n\nABAP 6.40\n2004\n\n\nABAP 6.20\n2002\n\n\nABAP 6.10\n2001\n\n\nABAP 4.6C\n2001\n\n\nABAP 4.6A\n1999\n\n\nABAP 4.5\n1999\n\n\nABAP 4.0\n1998\n\n\nABAP 3.0\n1997\n\n\n…\n…\n\n\nABAP 1.0\n1983\n\n\n","slug":"abap-01-abap","date":"2022-11-06T17:26:55.429Z","categories_index":"ABAP","tags_index":"Guia ABAP,Introdução ao ABAP","author_index":"Edmilson A."}]